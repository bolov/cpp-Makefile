# C++ Makefile
# BÄƒlan Mihail <mihail.balan@gmail.com>


# Makefile related variables
# ==============================================================================

# must be before any other includes
MAKEFILE_DIR := $(dir $(lastword $(MAKEFILE_LIST)))

# set BUILD variable
build ?= debug
BUILD := $(build)

# throw error if invalid BUILD
VALID_BUILDS := debug release
ifeq (,$(findstring $(BUILD), $(VALID_BUILDS)))
  $(error error invalid build '$(BUILD)'. Expected one of '$(VALID_BUILDS)')
endif

# File/Folder related variables
# ==============================================================================

ifndef NAME
  $(error NAME not set)
endif

PROJ_DIR ?= .

SRC_SOURCES_DIR ?= $(PROJ_DIR)/src
SRC_HEADERS_DIR ?= $(SRC_SOURCES_DIR)

BUILD_DIR ?= $(PROJ_DIR)/build-$(BUILD)

PREFIX  ?= $(PROJ_DIR)
BIN_DIR ?= $(PREFIX)/bin-$(BUILD)

ifndef SOURCES
  $(error SOURCES not set)
endif

OBJS := $(addprefix $(BUILD_DIR)/,  $(SOURCES:.cpp=.o))
PREREQS := $(OBJS:.o=.d)

#used for ctags and cscope
DB_SOURCES := $(shell find $(SRC_SOURCES_DIR) \( -name '*.c' -o -name '*.cpp' \) )
DB_HEADERS := $(shell find $(SRC_HEADERS_DIR) \( -name '*.h' -o -name '*.hpp' \) )

BIN_BASENAME := $(NAME)

OPTIMIZATION_FLAGS := $(optimization_flags.$(BUILD))

WARNING_FLAGS := $(warning_flags.all) $(warning_flags.$(BUILD))

CXX      ?= g++
CXXFLAGS := $(CXXFLAGS) $(cxxflags.$(BUILD)) \
            $(WARNING_FLAGS) $(OPTIMIZATION_FLAGS)
LDFLAGS  := $(LDFLAGS) $(ldflags.$(BUILD))

include $(MAKEFILE_DIR)/MakefileColor

# Builds, targets & rules
# ==============================================================================

build: $(BIN_DIR)/$(BIN_BASENAME)
.PHONY:build

# build executable
$(BIN_DIR)/$(BIN_BASENAME): $(OBJS)
	@echo "${COL_ACTION}linking${COL_RESET}" \
         "${COL_EXE}$@${COL_RESET} from: $(OBJS)\\n" \
	     "	flags: $(CXXFLAGS) $(LDFLAGS)\\n" | $(COL_BEHAVE)
	@mkdir -p $(@D)
	@$(CXX) -o $@ $(CXXFLAGS) $(OBJS) $(LDFLAGS)

run: build
	$(BIN_DIR)/$(BIN_BASENAME)
.PHONY:run

debug: build
	$(DEBUGGER) $(BIN_DIR)/$(BIN_BASENAME)

# build objects (compilation units)
$(OBJS):$(BUILD_DIR)/%.o:$(SRC_SOURCES_DIR)/%.cpp
	@echo "${COL_ACTION}compiling ${COL_FILE}$@${COL_RESET} from: $<\\n" \
	     "	flags: $(CXXFLAGS)\\n" | $(COL_BEHAVE)
	@mkdir -p $(@D)
	@$(CXX) -o $@ -c $(CXXFLAGS) $<

clean:
	@echo "${COL_ACTION}cleaning ${COL_DIR}$(BUILD_DIR)${COL_RESET} ;" \
	      "${COL_DIR}$(BIN_DIR)${COL_RESET} " | $(COL_BEHAVE)
	@rm -rf $(BUILD_DIR) $(BIN_DIR)
.PHONY: clean

include $(MAKEFILE_DIR)/MakefilePrerequisites
include $(MAKEFILE_DIR)/MakefileMetadata
include $(MAKEFILE_DIR)/MakefileFailSafe
