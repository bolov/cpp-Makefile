# C++ Makefile
# BÄƒlan Mihail <mihail.balan@gmail.com>


# Makefile related variables
# ==============================================================================

# set BUILD variable
build ?= debug
BUILD := $(build)

# throw error if invalid BUILD
VALID_BUILDS := debug release
ifeq (,$(findstring $(BUILD), $(VALID_BUILDS)))
  $(error error invalid build '$(BUILD)'. Expected one of '$(VALID_BUILDS)')
endif

# File/Folder related variables
# ==============================================================================

ifndef NAME
  $(error NAME not set)
endif

PROJ_DIR ?= .

SRC_SOURCES_DIR ?= $(PROJ_DIR)/lib
SRC_HEADERS_DIR ?= $(PROJ_DIR)/include

BUILD_DIR   ?= $(PROJ_DIR)/build-$(BUILD)

PREFIX      ?= $(PROJ_DIR)/install-$(BUILD)
LIB_DIR     ?= $(PREFIX)/lib
INCLUDE_DIR ?= $(PREFIX)/include

ifndef SOURCES
  $(error SOURCES not set)
endif

OBJS := $(addprefix $(BUILD_DIR)/,  $(SOURCES:.cpp=.o))
PREREQS := $(OBJS:.o=.d)

#used for ctags and cscope. DB_HEADERS used for install also
DB_SOURCES := $(shell find $(SRC_SOURCES_DIR) \( -name '*.c' -o -name '*.cpp' \) )
DB_HEADERS := $(shell find $(SRC_HEADERS_DIR) \( -name '*.h' -o -name '*.hpp' \) )

lib_suffix.release :=
lib_suffix.debug   := -debug

LIB_BASENAME ?= lib$(NAME)$(lib_suffix.$(BUILD)).a
INSTALLED_HEADERS := $(DB_HEADERS:$(SRC_HEADERS_DIR)/%=$(INCLUDE_DIR)/%)

COPIED_HEADERS_SRC = $(shell find $(SRC_HEADERS_DIR) -mindepth 1 -maxdepth 1)
COPIED_HEADERS_DST = $(COPIED_HEADERS_SRC:$(SRC_HEADERS_DIR)%=$(INCLUDE_DIR)%)

OPTIMIZATION_FLAGS := $(optimization_flags.$(BUILD))

WARNING_FLAGS := $(warning_flags.all) $(warning_flags.$(BUILD))

AR       := gcc-ar
CXX      ?= g++
CXXFLAGS := $(CXXFLAGS) $(WARNING_FLAGS) $(OPTIMIZATION_FLAGS) \
            -iquote "$(SRC_HEADERS_DIR)"

COL_BLACK   := `tput setaf 0`
COL_RED     := `tput setaf 1`
COL_GREEN   := `tput setaf 2`
COL_YELLOW  := `tput setaf 3`
COL_BLUE    := `tput setaf 4`
COL_MAGENTA := `tput setaf 5`
COL_CYAN    := `tput setaf 6`
COL_WHITE   := `tput setaf 7`

COL_RESET   := `tput sgr0`

COL_ACTION := $(COL_GREEN)
COL_FILE   := $(COL_CYAN)
COL_EXE    := $(COL_YELLOW)
COL_DIR    := $(COL_BLUE)

# if output supports color, just pass the input to output
# else strip the input from ASCII color codes
# ALWAYS pipe colored output to this
# sed expression taken from http://unix.stackexchange.com/a/4533/92787
COL_BEHAVE := ( test -t 1 && cat || \
   sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g" )

# Builds, targets & rules
# ==============================================================================

build: $(BUILD_DIR)/$(LIB_BASENAME)
.PHONY:build

install: $(LIB_DIR)/$(LIB_BASENAME) install-headers
.PHONY:install

# install library
$(LIB_DIR)/$(LIB_BASENAME): $(BUILD_DIR)/$(LIB_BASENAME)
	@echo "${COL_ACTION}installing ${COL_EXE}$(LIB_BASENAME)${COL_RESET}"\
	     "to ${COL_DIR}$(LIB_DIR)${COL_RESET}\\n" | $(COL_BEHAVE)
	@install -m 444 -D -t $(LIB_DIR) $(BUILD_DIR)/$(LIB_BASENAME)

install-headers:
	@echo "${COL_ACTION}installing headers${COL_RESET}"\
	     "to ${COL_DIR}$(INCLUDE_DIR)${COL_RESET} \\n" | $(COL_BEHAVE)
	@install -d $(INCLUDE_DIR)
	@cp -ruT $(SRC_HEADERS_DIR) $(INCLUDE_DIR)
.PHONY:install-headers

uninstall:
	@echo "${COL_ACTION}uninstalling${COL_RESET} "  \
	      "headers: ${COL_DIR}${COPIED_HEADERS_DST}${COL_RESET} ;" \
	      "lib: ${COL_EXE}$(LIB_DIR)/$(LIB_BASENAME)${COL_RESET}" | $(COL_BEHAVE)
	@rm -rf $(COPIED_HEADERS_DST) $(LIB_DIR)/$(LIB_BASENAME)
.PHONY:uninstall

# create the static library
$(BUILD_DIR)/$(LIB_BASENAME): $(OBJS)
	@echo "${COL_ACTION}creating static library${COL_RESET}" \
         "${COL_EXE}$@${COL_RESET} from: $^\\n" | $(COL_BEHAVE)
	@mkdir -p $(@D)
	@$(AR) rcs $@ $^

# build objects (compilation units)
$(OBJS):$(BUILD_DIR)/%.o:$(SRC_SOURCES_DIR)/%.cpp
	@echo "${COL_ACTION}compiling ${COL_FILE}$@${COL_RESET} from: $<\\n" \
	     "	flags: $(CXXFLAGS)\\n" | $(COL_BEHAVE)
	@mkdir -p $(@D)
	@$(CXX) -o $@ -c $(CXXFLAGS) $<

clean:
	@echo "${COL_ACTION}cleaning ${COL_DIR}${BUILD_DIR}${COL_RESET}" | \
		$(COL_BEHAVE)
	@rm -rf $(BUILD_DIR)
.PHONY: clean

#generated makefiles for automatic prerequisites of the included header files
# -M all headers; -MM ignore system
# -MG assume missing header
# -MT change target
$(PREREQS):$(BUILD_DIR)/%.d:$(SRC_SOURCES_DIR)/%.cpp
	@mkdir -p $(@D)
	@$(CXX) -o $@ -MM -MG -MT $(@:.d=.o) -MT $@ $(CXXFLAGS) $<

# include the makefiles with the automatic prerequisites of
# the included header files
# don't include for goals not needing them

ifndef MAKECMDGOALS
-include $(PREREQS)
endif

# .DEFAULT is here because fmm
# sometimes make calls itself with `-npq .DEFAULT`
# some sort of dry run that actually runs the commands
ifneq ($(MAKECMDGOALS), $(filter $(MAKECMDGOALS), \
    clean clean_metadata uninstall build_metadata \
    batch-clean batch-uninstall fail_safe .DEFAULT))
-include $(PREREQS)
endif

build_metadata: tags cscope.out
.PHONY: build_metadata

tags: $(DB_SOURCES) $(DB_HEADERS)
	# TODO works with 2 dirs?
	ctags -f $@ -R $(SRC_HEADERS_DIR) -R $(SRC_SOURCES_DIR)

cscope.out: $(DB_SOURCES) $(DB_HEADERS)
	cscope -f$@ -Rb

clean_metadata: clean
	@rm -f tags cscope.out
.PHONY: clean_metadata

FAIL_SAFE_FIND := find . -maxdepth 1 -type d -a -not -name ".*" \
                  -a \( -iname "*build*" -o  -iname "*install*" \)

fail-safe:
	@echo "Trigger ${COL_RED}fail-safe${COL_RESET}?" ; \
	echo "The following directories will be recursively removed:" ; \
	$(FAIL_SAFE_FIND) -print ; \
	echo -n "[y/n]: " ;\
	read answer ; \
	[ $$answer = y ] \
		&& $(FAIL_SAFE_FIND) -exec rm -fr {} +  \
		|| echo Fail Safe Aborted  ;
.PHONY:fail-safe

