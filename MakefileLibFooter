# C++ Makefile
# BÄƒlan Mihail <mihail.balan@gmail.com>


# Makefile related variables
# ==============================================================================

# must be before any other includes
MAKEFILE_DIR := $(dir $(lastword $(MAKEFILE_LIST)))

# set BUILD variable
build ?= debug
BUILD := $(build)

# throw error if invalid BUILD
VALID_BUILDS := debug release
ifeq (,$(findstring $(BUILD), $(VALID_BUILDS)))
  $(error error invalid build '$(BUILD)'. Expected one of '$(VALID_BUILDS)')
endif

# File/Folder related variables
# ==============================================================================

ifndef NAME
  $(error NAME not set)
endif

PROJ_DIR ?= .

SRC_SOURCES_DIR ?= $(PROJ_DIR)/lib
SRC_HEADERS_DIR ?= $(PROJ_DIR)/include

BUILD_DIR   ?= $(PROJ_DIR)/build-$(BUILD)

PREFIX      ?= $(PROJ_DIR)/install-$(BUILD)
LIB_DIR     ?= $(PREFIX)/lib
INCLUDE_DIR ?= $(PREFIX)/include

ifndef SOURCES
  $(error SOURCES not set)
endif

OBJS := $(addprefix $(BUILD_DIR)/,  $(SOURCES:.cpp=.o))
PREREQS := $(OBJS:.o=.d)

#used for ctags and cscope. DB_HEADERS used for install also
DB_SOURCES := $(shell find $(SRC_SOURCES_DIR) \( -name '*.c' -o -name '*.cpp' \) )
DB_HEADERS := $(shell find $(SRC_HEADERS_DIR) \( -name '*.h' -o -name '*.hpp' \) )

lib_suffix.release :=
lib_suffix.debug   := -debug

LIB_BASENAME ?= lib$(NAME)$(lib_suffix.$(BUILD)).a
INSTALLED_HEADERS := $(DB_HEADERS:$(SRC_HEADERS_DIR)/%=$(INCLUDE_DIR)/%)

COPIED_HEADERS_SRC = $(shell find $(SRC_HEADERS_DIR) -mindepth 1 -maxdepth 1)
COPIED_HEADERS_DST = $(COPIED_HEADERS_SRC:$(SRC_HEADERS_DIR)%=$(INCLUDE_DIR)%)

OPTIMIZATION_FLAGS := $(optimization_flags.$(BUILD))

WARNING_FLAGS := $(warning_flags.all) $(warning_flags.$(BUILD))

AR       := gcc-ar
CXX      ?= g++
CXXFLAGS := $(CXXFLAGS) $(cxxflags.$(BUILD)) \
            $(WARNING_FLAGS) $(OPTIMIZATION_FLAGS) \
            -iquote "$(SRC_HEADERS_DIR)"

include $(MAKEFILE_DIR)/MakefileColor

# Builds, targets & rules
# ==============================================================================

build: $(BUILD_DIR)/$(LIB_BASENAME)
.PHONY:build

install: $(LIB_DIR)/$(LIB_BASENAME) install-headers
.PHONY:install

# install library
$(LIB_DIR)/$(LIB_BASENAME): $(BUILD_DIR)/$(LIB_BASENAME)
	@echo "${COL_ACTION}installing ${COL_EXE}$(LIB_BASENAME)${COL_RESET}"\
	     "to ${COL_DIR}$(LIB_DIR)${COL_RESET}\\n" | $(COL_BEHAVE)
	@install -m 444 -D -t $(LIB_DIR) $(BUILD_DIR)/$(LIB_BASENAME)

install-headers:
	@echo "${COL_ACTION}installing headers${COL_RESET}"\
	     "to ${COL_DIR}$(INCLUDE_DIR)${COL_RESET} \\n" | $(COL_BEHAVE)
	@install -d $(INCLUDE_DIR)
	@cp -ruT $(SRC_HEADERS_DIR) $(INCLUDE_DIR)
.PHONY:install-headers

uninstall:
	@echo "${COL_ACTION}uninstalling${COL_RESET} "  \
	      "headers: ${COL_DIR}${COPIED_HEADERS_DST}${COL_RESET} ;" \
	      "lib: ${COL_EXE}$(LIB_DIR)/$(LIB_BASENAME)${COL_RESET}" | $(COL_BEHAVE)
	@rm -rf $(COPIED_HEADERS_DST) $(LIB_DIR)/$(LIB_BASENAME)
.PHONY:uninstall

# create the static library
$(BUILD_DIR)/$(LIB_BASENAME): $(OBJS)
	@echo "${COL_ACTION}creating static library${COL_RESET}" \
         "${COL_EXE}$@${COL_RESET} from: $^\\n" | $(COL_BEHAVE)
	@mkdir -p $(@D)
	@$(AR) rcs $@ $^

# build objects (compilation units)
$(OBJS):$(BUILD_DIR)/%.o:$(SRC_SOURCES_DIR)/%.cpp
	@echo "${COL_ACTION}compiling ${COL_FILE}$@${COL_RESET} from: $<\\n" \
	     "	flags: $(CXXFLAGS)\\n" | $(COL_BEHAVE)
	@mkdir -p $(@D)
	@$(CXX) -o $@ -c $(CXXFLAGS) $<

clean:
	@echo "${COL_ACTION}cleaning ${COL_DIR}${BUILD_DIR}${COL_RESET}" | \
		$(COL_BEHAVE)
	@rm -rf $(BUILD_DIR)
.PHONY: clean

include $(MAKEFILE_DIR)/MakefilePrerequisites
include $(MAKEFILE_DIR)/MakefileMetadata
include $(MAKEFILE_DIR)/MakefileFailSafe
